<!DOCTYPE html>
<html lang="en">
  <head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Startup Mom | </title>
  <!-- Begin Jekyll SEO tag v2.6.1 -->
<title>Startup Mom</title>
<meta name="generator" content="Jekyll v4.1.1" />
<meta property="og:title" content="Startup Mom" />
<meta name="author" content="Tamar Rucham" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://blog.parentscheduler.app/assets/css/main.css" />
<meta property="og:url" content="https://blog.parentscheduler.app/assets/css/main.css" />
<meta property="og:site_name" content="Startup Mom" />
<script type="application/ld+json">
{"author":{"@type":"Person","name":"Tamar Rucham"},"headline":"Startup Mom","@type":"WebPage","url":"https://blog.parentscheduler.app/assets/css/main.css","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->

  <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-171797937-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-171797937-1');
</script>
  <link rel="stylesheet" href="/assets/css/main.css" />
</head>

  <body>
    <header>
  <div class="header">
    <a href="/">
      <img src="/assets/img/startup_mom.jpg" alt="Startup Mom" width="600" />
    </a>
    <div class="header-subtitle">
      A blog based on my experiences building <a target="_blank" href="https://parentscheduler.app/">ParentScheduler</a>
    </div>
  </div>
</header>

    <main>
      <span class="desktop-visible">
        <div class="sidebar">
  <span class="author">
    <div class="bioheader"><img src="https://s.gravatar.com/avatar/b6082a5ffd214b4b6151900dd3d4d2a2?s=80" alt="Tamar Rucham" /><span>Tamar Rucham</span></div>
    <p style="-moz-user-select: none; user-select: none;">
      <strong>11</strong> years as a software engineer.
      <br />
      <strong>7</strong> years as a mom.
      <br />
      <strong>5</strong> years as a single mom.
      <br />
      <strong>2</strong> years as engineering manger.
      <br />
      <strong>Almost a year</strong> working on my startup <a href="https://parentscheduler.app/">ParentScheduler</a>, building simpler scheduling for parents.
    </p>
  </span>
  <span class="signup">
    <p>
      Wanna stay updated with new posts?
      <form id="ema_signup_form" target="_blank" action="https://madmimi.com/signups/subscribe/212399" accept-charset="UTF-8" method="post">
  <input name="utf8" type="hidden" value="✓"/>
  <div>
    <div class="mimi_field required">
      <input id="signup_email" name="signup[email]" type="text" data-required-field="This field is required" placeholder="your email"/>
    </div>
    <div class="mimi_field submit_field">
      <input type="submit" class="submit" value="Sign me up" id="webform_submit_button" data-default-text="Sign me up" data-submitting-text="Sending..." data-invalid-text="↑ You forgot some required fields" data-choose-list="↑ Choose a list" data-thanks="Thank you!"/>
    </div>
    <div style="background: white; font-size:1px; height: 0; overflow: hidden">
      <input type="text" name="b11c0b7cb41d7f2a0f8e1e5c0b970d4c" style="font-size: 1px; width: 1px !important; height:1px !important; border:0 !important; line-height: 1px !important; padding: 0 0; min-height:1px !important;"/>
      <input class="checkbox" type="checkbox" name="beacon"/>
    </div>
  </div>
</form>
<script type="text/javascript">
(function(global) {
  function serialize(form){if(!form||form.nodeName!=="FORM"){return }var i,j,q=[];for(i=form.elements.length-1;i>=0;i=i-1){if(form.elements[i].name===""){continue}switch(form.elements[i].nodeName){case"INPUT":switch(form.elements[i].type){case"text":case"hidden":case"password":case"button":case"reset":case"submit":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"checkbox":case"radio":if(form.elements[i].checked){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value))}break;case"file":break}break;case"TEXTAREA":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"SELECT":switch(form.elements[i].type){case"select-one":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"select-multiple":for(j=form.elements[i].options.length-1;j>=0;j=j-1){if(form.elements[i].options[j].selected){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].options[j].value))}}break}break;case"BUTTON":switch(form.elements[i].type){case"reset":case"submit":case"button":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break}break}}return q.join("&")};


  function extend(destination, source) {
    for (var prop in source) {
      destination[prop] = source[prop];
    }
  }

  if (!Mimi) var Mimi = {};
  if (!Mimi.Signups) Mimi.Signups = {};

  Mimi.Signups.EmbedValidation = function() {
    this.initialize();

    var _this = this;
    if (document.addEventListener) {
      this.form.addEventListener('submit', function(e){
        _this.onFormSubmit(e);
      });
    } else {
      this.form.attachEvent('onsubmit', function(e){
        _this.onFormSubmit(e);
      });
    }
  };

  extend(Mimi.Signups.EmbedValidation.prototype, {
    initialize: function() {
      this.form         = document.getElementById('ema_signup_form');
      this.submit       = document.getElementById('webform_submit_button');
      this.callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());
      this.validEmail   = /.+@.+\..+/
    },

    onFormSubmit: function(e) {
      e.preventDefault();

      this.validate();
      if (this.isValid) {
        this.submitForm();
      } else {
        this.revalidateOnChange();
      }
    },

    validate: function() {
      this.isValid = true;
      this.emailValidation();
      this.fieldAndListValidation();
      this.updateFormAfterValidation();
    },

    emailValidation: function() {
      var email = document.getElementById('signup_email');

      if (this.validEmail.test(email.value)) {
        this.removeTextFieldError(email);
      } else {
        this.textFieldError(email);
        this.isValid = false;
      }
    },

    fieldAndListValidation: function() {
      var fields = this.form.querySelectorAll('.mimi_field.required');

      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i],
            type  = this.fieldType(field);
        if (type === 'checkboxes' || type === 'radio_buttons' || type === 'age_check') {
          this.checkboxAndRadioValidation(field);
        } else {
          this.textAndDropdownValidation(field, type);
        }
      }
    },

    fieldType: function(field) {
      var type = field.querySelectorAll('.field_type');

      if (type.length) {
        return type[0].getAttribute('data-field-type');
      } else if (field.className.indexOf('checkgroup') >= 0) {
        return 'checkboxes';
      } else {
        return 'text_field';
      }
    },

    checkboxAndRadioValidation: function(field) {
      var inputs   = field.getElementsByTagName('input'),
          selected = false;

      for (var i = 0; i < inputs.length; ++i) {
        var input = inputs[i];
        if((input.type === 'checkbox' || input.type === 'radio') && input.checked) {
          selected = true;
        }
      }

      if (selected) {
        field.className = field.className.replace(/ invalid/g, '');
      } else {
        if (field.className.indexOf('invalid') === -1) {
          field.className += ' invalid';
        }

        this.isValid = false;
      }
    },

    textAndDropdownValidation: function(field, type) {
      var inputs = field.getElementsByTagName('input');

      for (var i = 0; i < inputs.length; ++i) {
        var input = inputs[i];
        if (input.name.indexOf('signup') >= 0) {
          if (type === 'text_field') {
            this.textValidation(input);
          } else {
            this.dropdownValidation(field, input);
          }
        }
      }
      this.htmlEmbedDropdownValidation(field);
    },

    textValidation: function(input) {
      if (input.id === 'signup_email') return;

      if (input.value) {
        this.removeTextFieldError(input);
      } else {
        this.textFieldError(input);
        this.isValid = false;
      }
    },

    dropdownValidation: function(field, input) {
      if (input.value) {
        field.className = field.className.replace(/ invalid/g, '');
      } else {
        if (field.className.indexOf('invalid') === -1) field.className += ' invalid';
        this.onSelectCallback(input);
        this.isValid = false;
      }
    },

    htmlEmbedDropdownValidation: function(field) {
      var dropdowns = field.querySelectorAll('.mimi_html_dropdown');
      var _this = this;

      for (var i = 0; i < dropdowns.length; ++i) {
        var dropdown = dropdowns[i];

        if (dropdown.value) {
          field.className = field.className.replace(/ invalid/g, '');
        } else {
          if (field.className.indexOf('invalid') === -1) field.className += ' invalid';
          this.isValid = false;
          dropdown.onchange = (function(){ _this.validate(); });
        }
      }
    },

    textFieldError: function(input) {
      input.className   = 'required invalid';
      input.placeholder = input.getAttribute('data-required-field');
    },

    removeTextFieldError: function(input) {
      input.className   = 'required';
      input.placeholder = '';
    },

    onSelectCallback: function(input) {
      if (typeof Widget === 'undefined' || !Widget.BasicDropdown) return;

      var dropdownEl = input.parentNode,
          instances  = Widget.BasicDropdown.instances,
          _this = this;

      for (var i = 0; i < instances.length; ++i) {
        var instance = instances[i];
        if (instance.wrapperEl === dropdownEl) {
          instance.onSelect = function(){ _this.validate() };
        }
      }
    },

    updateFormAfterValidation: function() {
      this.form.className   = this.setFormClassName();
      this.submit.value     = this.submitButtonText();
      this.submit.disabled  = !this.isValid;
      this.submit.className = this.isValid ? 'submit' : 'disabled';
    },

    setFormClassName: function() {
      var name = this.form.className;

      if (this.isValid) {
        return name.replace(/\s?mimi_invalid/, '');
      } else {
        if (name.indexOf('mimi_invalid') === -1) {
          return name += ' mimi_invalid';
        } else {
          return name;
        }
      }
    },

    submitButtonText: function() {
      var invalidFields = document.querySelectorAll('.invalid'),
          text;

      if (this.isValid || !invalidFields) {
        text = this.submit.getAttribute('data-default-text');
      } else {
        if (invalidFields.length || invalidFields[0].className.indexOf('checkgroup') === -1) {
          text = this.submit.getAttribute('data-invalid-text');
        } else {
          text = this.submit.getAttribute('data-choose-list');
        }
      }
      return text;
    },

    submitForm: function() {
      this.formSubmitting();

      var _this = this;
      window[this.callbackName] = function(response) {
        delete window[this.callbackName];
        document.body.removeChild(script);
        _this.onSubmitCallback(response);
      };

      var script = document.createElement('script');
      script.src = this.formUrl('json');
      document.body.appendChild(script);
    },

    formUrl: function(format) {
      var action  = this.form.action;
      if (format === 'json') action += '.json';
      return action + '?callback=' + this.callbackName + '&' + serialize(this.form);
    },

    formSubmitting: function() {
      this.form.className  += ' mimi_submitting';
      this.submit.value     = this.submit.getAttribute('data-submitting-text');
      this.submit.disabled  = true;
      this.submit.className = 'disabled';
    },

    onSubmitCallback: function(response) {
      if (response.success) {
        this.onSubmitSuccess(response.result);
      } else {
        top.location.href = this.formUrl('html');
      }
    },

    onSubmitSuccess: function(result) {
      if (result.has_redirect) {
        top.location.href = result.redirect;
      } else if(result.single_opt_in || !result.confirmation_html) {
        this.disableForm();
        this.updateSubmitButtonText(this.submit.getAttribute('data-thanks'));
      } else {
        this.showConfirmationText(result.confirmation_html);
      }
    },

    showConfirmationText: function(html) {
      var fields = this.form.querySelectorAll('.mimi_field');

      for (var i = 0; i < fields.length; ++i) {
        fields[i].style['display'] = 'none';
      }

      (this.form.querySelectorAll('fieldset')[0] || this.form).innerHTML = html;
    },

    disableForm: function() {
      var elements = this.form.elements;
      for (var i = 0; i < elements.length; ++i) {
        elements[i].disabled = true;
      }
    },

    updateSubmitButtonText: function(text) {
      this.submit.value = text;
    },

    revalidateOnChange: function() {
      var fields = this.form.querySelectorAll(".mimi_field.required"),
          _this = this;

      var onTextFieldChange = function() {
        if (this.getAttribute('name') === 'signup[email]') {
          if (_this.validEmail.test(this.value)) _this.validate();
        } else {
          if (this.value.length === 1) _this.validate();
        }
      }

      for (var i = 0; i < fields.length; ++i) {
        var inputs = fields[i].getElementsByTagName('input');
        for (var j = 0; j < inputs.length; ++j) {
          if (this.fieldType(fields[i]) === 'text_field') {
            inputs[j].onkeyup = onTextFieldChange;
            inputs[j].onchange = onTextFieldChange; 
          } else {
            inputs[j].onchange = function(){ _this.validate() };
          }
        }
      }
    }
  });

  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", function() {
      new Mimi.Signups.EmbedValidation();
    });
  }
  else {
    window.attachEvent('onload', function() {
      new Mimi.Signups.EmbedValidation();
    });
  }
})(this);
</script>
    </p>
  </span>
</div>

      </span>
      <article>
        <div class="meta">
          <h1 class="title">
            
            
            
          </h1>
          <h4>
            
          </h4>
          <small>,  minutes read</small>
        </div>
        <div class="content">
          @import url("https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,900;1,400&family=Montserrat:wght@900&display=swap");

* {
  padding: 0;
  margin: 0;
  text-decoration: none;
  font-family: inherit;
  line-height: inherit;
  outline: none;
  -webkit-user-drag: none;
  -webkit-tap-highlight-color: transparent;
}

body,
html {
  font-family: "Montserrat", serif;
  color: #666;
  line-height: 1.75;
  margin: 0;
  display: flex;
  flex-direction: column;
  height: 100%;
}

body p {
  font-size: 16px;
  line-height: 28px;
  color: rgba(0, 0, 0, 0.9);
}

main {
  margin-left: auto;
  margin-right: auto;
  max-width: 70rem;
  padding: 2.625rem 1.3125rem;
  flex: 1 0 auto;
}

footer {
  margin-top: 2rem;
  background-image: url('/assets/img/hero_pinkbg.svg');
  border-top: 0.1rem solid #AAA;
  flex-shrink: 0;
}

footer p {
  margin-left: 40px;
}

header * {
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

header {
  background-image: url('/assets/img/hero_pinkbg.svg');
  border-bottom: 0.1rem solid #AAA;
}

.desktop-visible {
  display: none;
}

.phone-visible {
  display: inline-block;
}

.header img {
  border-radius: 20px;
  height: 80%;
  width: 80%;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 20px;
  border: 0.2rem solid #AAA;
}

.header-subtitle {
  width: 80%;
  margin-left: auto;
  margin-right: auto;
  font-family: 'Montserrat-Light';
  font-size: 1rem;
  color: #888;
}

.author img {
  width: 50px;
  height: 50px;
  border-radius: 100%;
  margin: 0.5rem 1rem 0 0;
}

.author {
  border: 0.1rem solid #AAA;
  padding: 20px;
  border-radius: 12px;
  display: block;
}

.signup {
  border: 0.1rem solid #AAA;
  padding: 20px;
  border-radius: 12px;
  display: block;
  margin-top: 20px;
}

.sidebar {
  width: 80%;
  margin-right: auto;
  margin-left: auto;
}

#signup_email {
  padding-left: 8px;
  margin-bottom: 10px;
  width: 95%;
  text-align: left;
}

.mimi_field input {
  font-family: 'Montserrat';
  line-height: 1.5em;
  font-size: 1em;
  display: block;
  border: 0.1rem solid #C987A4;
  border-radius: 15px;
}

.submit {
  padding-left: 12px;
  padding-top: 2px;
  padding-bottom: 0px;
  border-radius: 15px;
  height: 100%;
  width: 100%;
  color: #C987A4;
  width: 100%;
}

.header {
  width: fit-content;
  margin-left: auto;
  margin-right: auto;
  padding-top: 30px;
  padding-bottom: 30px;
  text-align: center;
}

.bioheader {
  display: flex;
  align-items:center;
  font-size: 0.9rem;
}

.post {
  width: 90%;
  margin: 0px;
  display: block;
}

.post-image {
  width: 100%;
  height: 100%;
}

.post-container {
  border-bottom: 0.05rem solid #AAA;
  margin-bottom: 20px;
}

.image {
  display: block;
  margin: 0px;
}

.inline-post-image {
  width:  60%;
  margin-right: auto;
  margin-left: auto;
  display: block;
}

.post-image {
  border: solid 1px gray;
}

.share {
  width: auto;
  margin-right: auto;
  margin-left: auto;
  margin-bottom: 40px;
}

.posts {
  margin-top: 4rem;
  background-color: white;
}

.posts h3 {
  font-family: "Montserrat", "Georgia", serif;
  font-weight: 900;
  text-rendering: optimizeLegibility;
  font-size: 1.4427rem;
  line-height: 1.1;
  margin-top: 3.5rem;
}

.posts small {
  font-size: 80%;
  margin-top: 0.6rem;
  display: block;
}

.comments {
  border-top: 0.1rem solid #AAA;
  width: 80%;
  margin-left: auto;
  margin-right: auto;
}

.strike {
  text-decoration-line: line-through;
}

/* post page */
header.p-page * {
  font-weight: 900;
  text-rendering: optimizeLegibility;
  font-size: 1.4427rem;
  line-height: 1.1;
}

header.p-page {
  margin-bottom: 1.75rem;
}

article .title {
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  padding-bottom: 0;
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  color: #9AC6D4;
  font-family: Montserrat, sans-serif;
  font-weight: 900;
  text-rendering: optimizeLegibility;
  font-size: 2.5rem;
  line-height: 1.1;
}

article .meta {
  margin-bottom: 1.75rem;
}

.content p {
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  padding-bottom: 0;
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  margin-bottom: 1.75rem;
  line-height: inherit;
}

/* md syntax  */

.content h1 {
  font-size: 2rem;
}
.content h2 {
  font-size: 1.8rem;
}
.content h3 {
  font-size: 1.6rem;
}
.content h4 {
  font-size: 1.4rem;
}
.content h5 {
  font-size: 1.2rem;
}
.content h6 {
  font-size: 1rem;
}
.content h1,
.content h2,
.content h3,
.content h4,
.content h5,
.content h6 {
  margin: 1.75rem 0;
  color: inherit;
  font-family: "Montserrat", serif;
  font-weight: 900;
  line-height: 1.1;
}

.markdown-body .highlighter-rouge {
  width: calc(50px + 50vw);
  max-width: 500px;
}

.highlighter-rouge .highlight {
  margin-top: 5px;
}

.highlighter-rouge .highlight .highlight {
  overflow-x: auto;
}

.content pre {
  background: #00110d !important;
  padding: 12px 13px;
  margin-bottom: 1.75rem;
}

.content code {
  margin: 0 2px;
  padding: 3px 5px;
  color: #97e1ff;
  border-radius: 2px;
  white-space: pre;
  background-color: #00110d;
  font-family: monospace;
}

.content blockquote,
.content blockquote p {
  margin-left: -1.75rem;
  padding-left: 1.42188rem;
  margin-bottom: 1.75rem;
  font-size: 1.20112rem;
  line-height: 1.75rem;
  color: hsla(0, 0%, 0%, 0.59);
  font-style: italic;
  border-left: 0.32813rem solid hsla(0, 0%, 0%, 0.9);
}

.content strong {
  font-weight: bold;
}

.content ul,
.content ol {
  margin-left: 1rem;
  margin-bottom: 10px;
}

.content table {
  width: 100%;
  margin: 1rem 0;
  border-collapse: collapse;
}

.content table th {
  background-color: rgba(0, 0, 0, 0.9);
  color: #fff;
}
.content table * {
  border: 1px solid rgba(0, 0, 0, 0.9);
  padding: 0.2rem;
}

.content img {
  max-width: 100%;
  margin: 1rem 0;
}

/* syntax */

.highlight .hll {
  background-color: #333333;
}
.highlight {
  color: #ffffff;
}
.highlight .c {
  color: #008800;
  font-style: italic;
  background-color: #0f140f;
} /* Comment */
.highlight .err {
  color: #ffffff;
} /* Error */
.highlight .g {
  color: #ffffff;
} /* Generic */
.highlight .k {
  color: #fb660a;
  font-weight: bold;
} /* Keyword */
.highlight .l {
  color: #ffffff;
} /* Literal */
.highlight .n {
  color: #ffffff;
} /* Name */
.highlight .o {
  color: #ffffff;
} /* Operator */
.highlight .x {
  color: #ffffff;
} /* Other */
.highlight .p {
  color: #ffffff;
} /* Punctuation */
.highlight .cm {
  color: #008800;
  font-style: italic;
  background-color: #0f140f;
} /* Comment.Multiline */
.highlight .cp {
  color: #ff0007;
  font-weight: bold;
  font-style: italic;
  background-color: #0f140f;
} /* Comment.Preproc */
.highlight .c1 {
  color: #008800;
  font-style: italic;
  background-color: #0f140f;
} /* Comment.Single */
.highlight .cs {
  color: #008800;
  font-style: italic;
  background-color: #0f140f;
} /* Comment.Special */
.highlight .gd {
  color: #ffffff;
} /* Generic.Deleted */
.highlight .ge {
  color: #ffffff;
} /* Generic.Emph */
.highlight .gr {
  color: #ffffff;
} /* Generic.Error */
.highlight .gh {
  color: #ffffff;
  font-weight: bold;
} /* Generic.Heading */
.highlight .gi {
  color: #ffffff;
} /* Generic.Inserted */
.highlight .go {
  color: #444444;
  background-color: #222222;
} /* Generic.Output */
.highlight .gp {
  color: #ffffff;
} /* Generic.Prompt */
.highlight .gs {
  color: #ffffff;
} /* Generic.Strong */
.highlight .gu {
  color: #ffffff;
  font-weight: bold;
} /* Generic.Subheading */
.highlight .gt {
  color: #ffffff;
} /* Generic.Traceback */
.highlight .kc {
  color: #fb660a;
  font-weight: bold;
} /* Keyword.Constant */
.highlight .kd {
  color: #fb660a;
  font-weight: bold;
} /* Keyword.Declaration */
.highlight .kn {
  color: #fb660a;
  font-weight: bold;
} /* Keyword.Namespace */
.highlight .kp {
  color: #fb660a;
} /* Keyword.Pseudo */
.highlight .kr {
  color: #fb660a;
  font-weight: bold;
} /* Keyword.Reserved */
.highlight .kt {
  color: #cdcaa9;
  font-weight: bold;
} /* Keyword.Type */
.highlight .ld {
  color: #ffffff;
} /* Literal.Date */
.highlight .m {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number */
.highlight .s {
  color: #0086d2;
} /* Literal.String */
.highlight .na {
  color: #ff0086;
  font-weight: bold;
} /* Name.Attribute */
.highlight .nb {
  color: #ffffff;
} /* Name.Builtin */
.highlight .nc {
  color: #ffffff;
} /* Name.Class */
.highlight .no {
  color: #0086d2;
} /* Name.Constant */
.highlight .nd {
  color: #ffffff;
} /* Name.Decorator */
.highlight .ni {
  color: #ffffff;
} /* Name.Entity */
.highlight .ne {
  color: #ffffff;
} /* Name.Exception */
.highlight .nf {
  color: #ff0086;
  font-weight: bold;
} /* Name.Function */
.highlight .nl {
  color: #ffffff;
} /* Name.Label */
.highlight .nn {
  color: #ffffff;
} /* Name.Namespace */
.highlight .nx {
  color: #ffffff;
} /* Name.Other */
.highlight .py {
  color: #ffffff;
} /* Name.Property */
.highlight .nt {
  color: #fb660a;
  font-weight: bold;
} /* Name.Tag */
.highlight .nv {
  color: #fb660a;
} /* Name.Variable */
.highlight .ow {
  color: #ffffff;
} /* Operator.Word */
.highlight .w {
  color: #888888;
} /* Text.Whitespace */
.highlight .mf {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number.Float */
.highlight .mh {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number.Hex */
.highlight .mi {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number.Integer */
.highlight .mo {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number.Oct */
.highlight .sb {
  color: #0086d2;
} /* Literal.String.Backtick */
.highlight .sc {
  color: #0086d2;
} /* Literal.String.Char */
.highlight .sd {
  color: #0086d2;
} /* Literal.String.Doc */
.highlight .s2 {
  color: #0086d2;
} /* Literal.String.Double */
.highlight .se {
  color: #0086d2;
} /* Literal.String.Escape */
.highlight .sh {
  color: #0086d2;
} /* Literal.String.Heredoc */
.highlight .si {
  color: #0086d2;
} /* Literal.String.Interpol */
.highlight .sx {
  color: #0086d2;
} /* Literal.String.Other */
.highlight .sr {
  color: #0086d2;
} /* Literal.String.Regex */
.highlight .s1 {
  color: #0086d2;
} /* Literal.String.Single */
.highlight .ss {
  color: #0086d2;
} /* Literal.String.Symbol */
.highlight .bp {
  color: #ffffff;
} /* Name.Builtin.Pseudo */
.highlight .vc {
  color: #fb660a;
} /* Name.Variable.Class */
.highlight .vg {
  color: #fb660a;
} /* Name.Variable.Global */
.highlight .vi {
  color: #fb660a;
} /* Name.Variable.Instance */
.highlight .il {
  color: #0086f7;
  font-weight: bold;
} /* Literal.Number.Integer.Long */

/* dark mode */

.darkmode {
  color: white !important;
  background-color: black !important;
}
.darkmode header p,
.darkmode header h1 {
  color: white !important;
}

.darkmode p {
  color: white !important;
}

html, body {
	transition-duration: 0.4s;
}

@-moz-keyframes spin {
  100% {
    -moz-transform: rotate(45deg);
  }
}
@-webkit-keyframes spin {
  100% {
    -webkit-transform: rotate(45deg);
  }
}
@keyframes spin {
  100% {
    -webkit-transform: rotate(45deg);
    transform: rotate(45deg);
  }
}

/* Emoji */

.emoji {
  margin-bottom: -4px;
}

/* light box */

/* lightbox */

.content img {
  cursor: zoom-in;
}

#lightbox {
  position: fixed;
  z-index: 1000;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  display: none;
}

#lightbox.active {
  display: flex;
  justify-content: center;
  align-items: center;
}

#lightbox img {
  max-width: 90%;
  max-height: 80%;
  padding: 4px;
  background-color: black;
  border: 2px solid white;
}

@media only screen and (min-width: 768px) {
  .sidebar {
    width: 25%;
    float: right;
    margin-left: 20px;
    display: inline-block;
  }

  .signup {
    margin-top: 50px;
  }

  .header img {
    height: 30%;
    width: 30%;
  }

  .desktop-visible {
    display: inline;
  }

  .phone-visible {
    display: none;
  }

  main {
    width: 70rem;
  }

  .post {
    width: 50%;
    margin: 0px;
    display: inline-block;
  }

  .post-image {
    width: auto;
    height: auto;
  }

  .post-gif {
    width: 400px;
    height: 400px;
  }

  .image {
    margin: 0px;
    display: inline-block;
    margin-right: 20px;
  }

  .post-container {
    border-bottom: 0;
  }

  .comments {
    width: 50%;
  }
}
        </div>
      </article>
      <span class="phone-visible">
        <div class="sidebar">
  <span class="author">
    <div class="bioheader"><img src="https://s.gravatar.com/avatar/b6082a5ffd214b4b6151900dd3d4d2a2?s=80" alt="Tamar Rucham" /><span>Tamar Rucham</span></div>
    <p style="-moz-user-select: none; user-select: none;">
      <strong>11</strong> years as a software engineer.
      <br />
      <strong>7</strong> years as a mom.
      <br />
      <strong>5</strong> years as a single mom.
      <br />
      <strong>2</strong> years as engineering manger.
      <br />
      <strong>Almost a year</strong> working on my startup <a href="https://parentscheduler.app/">ParentScheduler</a>, building simpler scheduling for parents.
    </p>
  </span>
  <span class="signup">
    <p>
      Wanna stay updated with new posts?
      <form id="ema_signup_form" target="_blank" action="https://madmimi.com/signups/subscribe/212399" accept-charset="UTF-8" method="post">
  <input name="utf8" type="hidden" value="✓"/>
  <div>
    <div class="mimi_field required">
      <input id="signup_email" name="signup[email]" type="text" data-required-field="This field is required" placeholder="your email"/>
    </div>
    <div class="mimi_field submit_field">
      <input type="submit" class="submit" value="Sign me up" id="webform_submit_button" data-default-text="Sign me up" data-submitting-text="Sending..." data-invalid-text="↑ You forgot some required fields" data-choose-list="↑ Choose a list" data-thanks="Thank you!"/>
    </div>
    <div style="background: white; font-size:1px; height: 0; overflow: hidden">
      <input type="text" name="b11c0b7cb41d7f2a0f8e1e5c0b970d4c" style="font-size: 1px; width: 1px !important; height:1px !important; border:0 !important; line-height: 1px !important; padding: 0 0; min-height:1px !important;"/>
      <input class="checkbox" type="checkbox" name="beacon"/>
    </div>
  </div>
</form>
<script type="text/javascript">
(function(global) {
  function serialize(form){if(!form||form.nodeName!=="FORM"){return }var i,j,q=[];for(i=form.elements.length-1;i>=0;i=i-1){if(form.elements[i].name===""){continue}switch(form.elements[i].nodeName){case"INPUT":switch(form.elements[i].type){case"text":case"hidden":case"password":case"button":case"reset":case"submit":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"checkbox":case"radio":if(form.elements[i].checked){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value))}break;case"file":break}break;case"TEXTAREA":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"SELECT":switch(form.elements[i].type){case"select-one":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break;case"select-multiple":for(j=form.elements[i].options.length-1;j>=0;j=j-1){if(form.elements[i].options[j].selected){q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].options[j].value))}}break}break;case"BUTTON":switch(form.elements[i].type){case"reset":case"submit":case"button":q.push(form.elements[i].name+"="+encodeURIComponent(form.elements[i].value));break}break}}return q.join("&")};


  function extend(destination, source) {
    for (var prop in source) {
      destination[prop] = source[prop];
    }
  }

  if (!Mimi) var Mimi = {};
  if (!Mimi.Signups) Mimi.Signups = {};

  Mimi.Signups.EmbedValidation = function() {
    this.initialize();

    var _this = this;
    if (document.addEventListener) {
      this.form.addEventListener('submit', function(e){
        _this.onFormSubmit(e);
      });
    } else {
      this.form.attachEvent('onsubmit', function(e){
        _this.onFormSubmit(e);
      });
    }
  };

  extend(Mimi.Signups.EmbedValidation.prototype, {
    initialize: function() {
      this.form         = document.getElementById('ema_signup_form');
      this.submit       = document.getElementById('webform_submit_button');
      this.callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());
      this.validEmail   = /.+@.+\..+/
    },

    onFormSubmit: function(e) {
      e.preventDefault();

      this.validate();
      if (this.isValid) {
        this.submitForm();
      } else {
        this.revalidateOnChange();
      }
    },

    validate: function() {
      this.isValid = true;
      this.emailValidation();
      this.fieldAndListValidation();
      this.updateFormAfterValidation();
    },

    emailValidation: function() {
      var email = document.getElementById('signup_email');

      if (this.validEmail.test(email.value)) {
        this.removeTextFieldError(email);
      } else {
        this.textFieldError(email);
        this.isValid = false;
      }
    },

    fieldAndListValidation: function() {
      var fields = this.form.querySelectorAll('.mimi_field.required');

      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i],
            type  = this.fieldType(field);
        if (type === 'checkboxes' || type === 'radio_buttons' || type === 'age_check') {
          this.checkboxAndRadioValidation(field);
        } else {
          this.textAndDropdownValidation(field, type);
        }
      }
    },

    fieldType: function(field) {
      var type = field.querySelectorAll('.field_type');

      if (type.length) {
        return type[0].getAttribute('data-field-type');
      } else if (field.className.indexOf('checkgroup') >= 0) {
        return 'checkboxes';
      } else {
        return 'text_field';
      }
    },

    checkboxAndRadioValidation: function(field) {
      var inputs   = field.getElementsByTagName('input'),
          selected = false;

      for (var i = 0; i < inputs.length; ++i) {
        var input = inputs[i];
        if((input.type === 'checkbox' || input.type === 'radio') && input.checked) {
          selected = true;
        }
      }

      if (selected) {
        field.className = field.className.replace(/ invalid/g, '');
      } else {
        if (field.className.indexOf('invalid') === -1) {
          field.className += ' invalid';
        }

        this.isValid = false;
      }
    },

    textAndDropdownValidation: function(field, type) {
      var inputs = field.getElementsByTagName('input');

      for (var i = 0; i < inputs.length; ++i) {
        var input = inputs[i];
        if (input.name.indexOf('signup') >= 0) {
          if (type === 'text_field') {
            this.textValidation(input);
          } else {
            this.dropdownValidation(field, input);
          }
        }
      }
      this.htmlEmbedDropdownValidation(field);
    },

    textValidation: function(input) {
      if (input.id === 'signup_email') return;

      if (input.value) {
        this.removeTextFieldError(input);
      } else {
        this.textFieldError(input);
        this.isValid = false;
      }
    },

    dropdownValidation: function(field, input) {
      if (input.value) {
        field.className = field.className.replace(/ invalid/g, '');
      } else {
        if (field.className.indexOf('invalid') === -1) field.className += ' invalid';
        this.onSelectCallback(input);
        this.isValid = false;
      }
    },

    htmlEmbedDropdownValidation: function(field) {
      var dropdowns = field.querySelectorAll('.mimi_html_dropdown');
      var _this = this;

      for (var i = 0; i < dropdowns.length; ++i) {
        var dropdown = dropdowns[i];

        if (dropdown.value) {
          field.className = field.className.replace(/ invalid/g, '');
        } else {
          if (field.className.indexOf('invalid') === -1) field.className += ' invalid';
          this.isValid = false;
          dropdown.onchange = (function(){ _this.validate(); });
        }
      }
    },

    textFieldError: function(input) {
      input.className   = 'required invalid';
      input.placeholder = input.getAttribute('data-required-field');
    },

    removeTextFieldError: function(input) {
      input.className   = 'required';
      input.placeholder = '';
    },

    onSelectCallback: function(input) {
      if (typeof Widget === 'undefined' || !Widget.BasicDropdown) return;

      var dropdownEl = input.parentNode,
          instances  = Widget.BasicDropdown.instances,
          _this = this;

      for (var i = 0; i < instances.length; ++i) {
        var instance = instances[i];
        if (instance.wrapperEl === dropdownEl) {
          instance.onSelect = function(){ _this.validate() };
        }
      }
    },

    updateFormAfterValidation: function() {
      this.form.className   = this.setFormClassName();
      this.submit.value     = this.submitButtonText();
      this.submit.disabled  = !this.isValid;
      this.submit.className = this.isValid ? 'submit' : 'disabled';
    },

    setFormClassName: function() {
      var name = this.form.className;

      if (this.isValid) {
        return name.replace(/\s?mimi_invalid/, '');
      } else {
        if (name.indexOf('mimi_invalid') === -1) {
          return name += ' mimi_invalid';
        } else {
          return name;
        }
      }
    },

    submitButtonText: function() {
      var invalidFields = document.querySelectorAll('.invalid'),
          text;

      if (this.isValid || !invalidFields) {
        text = this.submit.getAttribute('data-default-text');
      } else {
        if (invalidFields.length || invalidFields[0].className.indexOf('checkgroup') === -1) {
          text = this.submit.getAttribute('data-invalid-text');
        } else {
          text = this.submit.getAttribute('data-choose-list');
        }
      }
      return text;
    },

    submitForm: function() {
      this.formSubmitting();

      var _this = this;
      window[this.callbackName] = function(response) {
        delete window[this.callbackName];
        document.body.removeChild(script);
        _this.onSubmitCallback(response);
      };

      var script = document.createElement('script');
      script.src = this.formUrl('json');
      document.body.appendChild(script);
    },

    formUrl: function(format) {
      var action  = this.form.action;
      if (format === 'json') action += '.json';
      return action + '?callback=' + this.callbackName + '&' + serialize(this.form);
    },

    formSubmitting: function() {
      this.form.className  += ' mimi_submitting';
      this.submit.value     = this.submit.getAttribute('data-submitting-text');
      this.submit.disabled  = true;
      this.submit.className = 'disabled';
    },

    onSubmitCallback: function(response) {
      if (response.success) {
        this.onSubmitSuccess(response.result);
      } else {
        top.location.href = this.formUrl('html');
      }
    },

    onSubmitSuccess: function(result) {
      if (result.has_redirect) {
        top.location.href = result.redirect;
      } else if(result.single_opt_in || !result.confirmation_html) {
        this.disableForm();
        this.updateSubmitButtonText(this.submit.getAttribute('data-thanks'));
      } else {
        this.showConfirmationText(result.confirmation_html);
      }
    },

    showConfirmationText: function(html) {
      var fields = this.form.querySelectorAll('.mimi_field');

      for (var i = 0; i < fields.length; ++i) {
        fields[i].style['display'] = 'none';
      }

      (this.form.querySelectorAll('fieldset')[0] || this.form).innerHTML = html;
    },

    disableForm: function() {
      var elements = this.form.elements;
      for (var i = 0; i < elements.length; ++i) {
        elements[i].disabled = true;
      }
    },

    updateSubmitButtonText: function(text) {
      this.submit.value = text;
    },

    revalidateOnChange: function() {
      var fields = this.form.querySelectorAll(".mimi_field.required"),
          _this = this;

      var onTextFieldChange = function() {
        if (this.getAttribute('name') === 'signup[email]') {
          if (_this.validEmail.test(this.value)) _this.validate();
        } else {
          if (this.value.length === 1) _this.validate();
        }
      }

      for (var i = 0; i < fields.length; ++i) {
        var inputs = fields[i].getElementsByTagName('input');
        for (var j = 0; j < inputs.length; ++j) {
          if (this.fieldType(fields[i]) === 'text_field') {
            inputs[j].onkeyup = onTextFieldChange;
            inputs[j].onchange = onTextFieldChange; 
          } else {
            inputs[j].onchange = function(){ _this.validate() };
          }
        }
      }
    }
  });

  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", function() {
      new Mimi.Signups.EmbedValidation();
    });
  }
  else {
    window.attachEvent('onload', function() {
      new Mimi.Signups.EmbedValidation();
    });
  }
})(this);
</script>
    </p>
  </span>
</div>

      </span>
    </main>
    <span class="share">

<style>
#share-buttons {display: inline-block; vertical-align: middle; }
#share-buttons:after {content: ""; display: block; clear: both;}
#share-buttons > div {
    position: relative;
    text-align: left; 
    height: 36px; 
    width: 32px; 
    float: left; 
    text-align: center;
}
#share-buttons > div > svg {height: 16px; fill: #d5d5d5; margin-top: 10px;}
#share-buttons > div:hover {cursor: pointer;}
#share-buttons > div.facebook:hover > svg {fill: #3B5998;}
#share-buttons > div.twitter:hover > svg {fill: #55ACEE;}
#share-buttons > div.linkedin:hover > svg {fill: #0077b5;}
#share-buttons > div.pinterest:hover > svg {fill: #CB2027;}
#share-buttons > div.gplus:hover > svg {fill: #dd4b39;}
#share-buttons > div.mail:hover > svg {fill: #7D7D7D;}
#share-buttons > div.instagram:hover > svg {fill: #C73B92;}
#share-buttons > div.facebook > svg {height: 18px; margin-top: 9px;}
#share-buttons > div.twitter > svg {height: 20px; margin-top: 8px;}
#share-buttons > div.linkedin > svg {height: 19px; margin-top: 7px;}
#share-buttons > div.pinterest > svg {height: 20px; margin-top: 9px;}
#share-buttons > div.gplus > svg {height: 17px; margin-top: 9px; position: relative; left: 1px;}
#share-buttons > div.mail > svg {height: 14px; margin-top: 11px;}
</style>

<span style="color: #C987A4;">Share on: </span><div id="share-buttons">
    <div class="facebook" title="Share this on Facebook" onclick="window.open('https://facebook.com/sharer.php?u=https://blog.parentscheduler.app/assets/css/main.css');"><svg viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759h-306v-759h-255v-296h255v-218q0-186 104-288.5t277-102.5q147 0 228 12z"/></svg></div>
    <div class="twitter" title="Share this on Twitter" onclick="window.open('https://twitter.com/intent/tweet?text=&url=https://blog.parentscheduler.app/assets/css/main.css&via=tamarucham&related=tamarucham');"><svg viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z"/></svg></div>
    <div class="linkedin" title="Share this on Linkedin" onclick="window.open('https://www.linkedin.com/shareArticle?mini=true&url=https://blog.parentscheduler.app/assets/css/main.css&title=&source=https://blog.parentscheduler.app');"><svg viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M477 625v991h-330v-991h330zm21-306q1 73-50.5 122t-135.5 49h-2q-82 0-132-49t-50-122q0-74 51.5-122.5t134.5-48.5 133 48.5 51 122.5zm1166 729v568h-329v-530q0-105-40.5-164.5t-126.5-59.5q-63 0-105.5 34.5t-63.5 85.5q-11 30-11 81v553h-329q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5 114.5-15.5q171 0 275 113.5t104 332.5z"/></svg></div>
    
    <div class="gplus" title="Share this on Google Plus" onclick="window.open('https://plus.google.com/share?url=https://blog.parentscheduler.app/assets/css/main.css');"><svg viewBox="0 0 2304 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1437 913q0 208-87 370.5t-248 254-369 91.5q-149 0-285-58t-234-156-156-234-58-285 58-285 156-234 234-156 285-58q286 0 491 192l-199 191q-117-113-292-113-123 0-227.5 62t-165.5 168.5-61 232.5 61 232.5 165.5 168.5 227.5 62q83 0 152.5-23t114.5-57.5 78.5-78.5 49-83 21.5-74h-416v-252h692q12 63 12 122zm867-122v210h-209v209h-210v-209h-209v-210h209v-209h210v209h209z"/></svg></div>
    <div class="mail" title="Share this through Email" onclick="window.open('mailto:?&body=https://blog.parentscheduler.app/assets/css/main.css');"><svg viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1792 710v794q0 66-47 113t-113 47h-1472q-66 0-113-47t-47-113v-794q44 49 101 87 362 246 497 345 57 42 92.5 65.5t94.5 48 110 24.5h2q51 0 110-24.5t94.5-48 92.5-65.5q170-123 498-345 57-39 100-87zm0-294q0 79-49 151t-122 123q-376 261-468 325-10 7-42.5 30.5t-54 38-52 32.5-57.5 27-50 9h-2q-23 0-50-9t-57.5-27-52-32.5-54-38-42.5-30.5q-91-64-262-182.5t-205-142.5q-62-42-117-115.5t-55-136.5q0-78 41.5-130t118.5-52h1472q65 0 112.5 47t47.5 113z"/></svg></div>
</div></span>
    <div id="hyvor-talk-view" class="comments"></div>
    <script type="text/javascript">
        var HYVOR_TALK_WEBSITE = 1263; // DO NOT CHANGE THIS
        var HYVOR_TALK_CONFIG = {
            url: 'https://blog.parentscheduler.app/assets/css/main.css',
            id: ''
        };
    </script>
    <script async type="text/javascript" src="//talk.hyvor.com/web-api/embed"></script>
    <footer>
  <p>
    <a href="https://parentscheduler.app//">ParentScheduler</a> &copy; 2020
  </p>
</footer>
<script src="/assets/js/lbox.js"></script>
  </body>
</html>